# How to Integrate Collaborative Filtering with Your Flask App

Follow these steps to integrate the collaborative filtering recommendation system with your existing Flask application:

## Step 1: Install Required Dependencies

Make sure you have the required dependencies installed in your virtual environment:

```bash
# Activate your virtual environment first
.\venv310\Scripts\activate

# Install the required packages with compatible versions
pip install numpy==1.24.3 pandas scikit-learn==1.2.2 scikit-surprise==1.1.3
```

> **Note**: The specific versions are important for compatibility. NumPy 1.24.3 is required for scikit-surprise to work properly.

## Step 2: Generate User Interactions and Train Models

Run these scripts to generate user interactions and train the collaborative filtering models:

```bash
# Make sure your virtual environment is activated
python generate_user_interactions.py
python train_collaborative_filtering.py
```

If you encounter any errors:
- Check that NumPy is installed correctly
- Verify that the UdemyCleanedTitle.csv file is in the correct location
- Make sure all dependencies are installed with compatible versions

## Step 3: Integrate with Your Flask App

Add the following code to your `app.py` file, right after initializing your Flask app and mongo:

```python
# Import the recommendation routes function
from integrate_recommendations import add_recommendation_routes

# Add the recommendation routes to your app
add_recommendation_routes(app, mongo)
```

The code should be placed after these lines in your app.py:

```python
app = Flask(__name__)
app.config["MONGO_URI"] = "mongodb+srv://..."
# ... other app configurations ...
mongo = PyMongo(app)
bcrypt = Bcrypt(app)

# Add this line:
from integrate_recommendations import add_recommendation_routes
add_recommendation_routes(app, mongo)
```

## Step 4: Test the Integration

After making these changes, restart your Flask app and test the new endpoints:

- `/api/recommendations/<user_id>` - Get recommendations for a specific user
- `/api/trending` - Get trending courses
- `/recommendations/collaborative` - Get recommendations for the logged-in user (or with user_id parameter)

You can test the endpoints with curl or a browser:

```bash
# Get recommendations for a specific user
curl http://localhost:5000/api/recommendations/user_1

# Get trending courses
curl http://localhost:5000/api/trending

# Get collaborative recommendations (when logged in or with user_id parameter)
curl http://localhost:5000/recommendations/collaborative?user_id=user_1
```

## Step 5: Update Your Personalized Recommendations Endpoint (Optional)

You can also update your existing `/recommendations/personalized` endpoint to use collaborative filtering:

```python
@app.route('/recommendations/personalized', methods=['GET'])
def personalized_recommendations():
    # Get user ID from session or request parameter
    user_id = None
    try:
        if 'user_id' in session:
            user_id = session['user_id']
    except Exception:
        pass
        
    if not user_id:
        user_id = request.args.get('user_id')
        
    if not user_id:
        return jsonify({
            "success": False,
            "message": "User not logged in or user_id not provided"
        }), 401
    
    # Get user preferences from database
    user = mongo.db.users.find_one({"_id": user_id})
    
    # Use content-based filtering for new users or those with preferences
    if user and (user.get('preferred_topics') or user.get('skill_level')):
        # Your existing content-based code...
        # ...
    else:
        # Use collaborative filtering for users with interactions
        from integrate_recommendations import get_course_recommendations, format_recommendations_response
        
        limit = request.args.get('limit', default=10, type=int)
        recommendations = get_course_recommendations(user_id, limit, use_hybrid=True)
        response = format_recommendations_response(recommendations)
        
        return jsonify(response)
```

## Troubleshooting

If you encounter any issues with the integration:

1. **Dependency Issues**:
   - Make sure NumPy 1.24.3 is installed (`pip install numpy==1.24.3`)
   - Install scikit-surprise with the correct version (`pip install scikit-surprise==1.1.3`)
   - Check for any conflicting packages

2. **File Not Found Errors**:
   - Verify that `UdemyCleanedTitle.csv` is in the root directory
   - Make sure the model files are generated correctly

3. **Import Errors**:
   - Check that all required packages are installed
   - Verify that the recommendation_functions.py file is generated

4. **Session Errors**:
   - If you get errors about session, make sure Flask's session is properly configured
   - You can also use the user_id parameter instead of relying on session

5. **Testing Without Flask**:
   - Use the `test_recommendations.py` script to test the recommendation system without Flask
   - This can help isolate issues with the recommendation system vs. Flask integration 